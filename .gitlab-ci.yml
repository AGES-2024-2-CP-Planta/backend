stages:
  - build
  - deploy
  - release

services:
  - docker:dind

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

# ------------- BUILD SCRIPTS -------------

build-postgres:
  tags:
    - ages-runner
  stage: build
  script:
    - docker build -t $CI_REGISTRY_USER/postgres-cpplanta -f Dockerfile.postgres .
    - docker push $CI_REGISTRY_USER/postgres-cpplanta
  when: manual
  only:
    - dev

build-node:
  tags:
    - ages-runner
  stage: build
  script:
    - docker build -t $CI_REGISTRY_USER/backend-cpplanta -f Dockerfile.node .
    - docker push $CI_REGISTRY_USER/backend-cpplanta
  only:
    - dev

# ------------- DEPLOY SCRIPTS -------------
deploy-node:
  stage: deploy
  before_script:
    - docker stop backend_cpplanta || true
    - docker rm backend_cpplanta || true
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend-cpplanta
    - docker run -d --restart always --name=backend_cpplanta -p 3000:3000 $CI_REGISTRY_IMAGE/backend-cpplanta
  tags:
    - ages-runner
  only:
    - dev

deploy-postgres:
  stage: deploy
  before_script:
    - docker stop postgres_cpplanta || true
    - docker rm postgres_cpplanta || true
  script:
    - docker pull $CI_REGISTRY_IMAGE/postgres-cpplanta
    - docker run -d --restart always --name=postgres_cpplanta -p 5432:5432 $CI_REGISTRY_IMAGE/postgres-cpplanta
  tags:
    - ages-runner
  when: manual
  only:
    - dev

# ------------- RELEASE SCRIPTS -------------
release:
  stage: release
  image: node:16
  script:
    - npm ci # Instala as dependências
    - npx semantic-release # Executa o semantic-release
  only:
    - develop # ou o branch principal que você está usando
  variables:
    GITLAB_TOKEN: $CI_JOB_TOKEN
