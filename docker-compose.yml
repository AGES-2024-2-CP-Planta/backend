version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: dockerfile.node
    env_file:
      - .env
    restart: always
    ports:
      - "${NODE_LOCAL_PORT}:${NODE_DOCKER_PORT}"
    expose:
      - '3000'
    stdin_open: true
    tty: true
    volumes:
      - .:/app/
      - .:/app/node_modules
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - pgadmin
    networks:
      - myapp-network

  database:
    build:
      context: .
      dockerfile: dockerfile.postgres
    env_file:
      - .env
    restart: always
    ports:
      - ${POSTGRES_DOCKER_PORT}:${DB_PORT}
    stdin_open: true
    tty: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgpersistencedata:/var/lib/postgresql/data
      - ./scripts/db_create.sql:/docker-entrypoint-initdb.d/db_create.sql
      - ./scripts/db_insert.sql:/docker-entrypoint-initdb.d/db_insert.sql
    networks:
      - myapp-network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - '80:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - database
    networks:
      - myapp-network

networks:
  myapp-network:
    driver: bridge

volumes:
  pgpersistencedata:
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './database'
